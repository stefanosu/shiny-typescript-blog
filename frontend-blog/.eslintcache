[{"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/index.js":"1","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/reportWebVitals.ts":"2","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/NewPost.tsx":"3","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/App.tsx":"4","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/UserRegister.tsx":"5","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/Post.tsx":"6","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/HomePage.tsx":"7","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/UserLogin.tsx":"8"},{"size":500,"mtime":1610262456122,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1610301461108,"results":"11","hashOfConfig":"10"},{"size":1680,"mtime":1610514825984,"results":"12","hashOfConfig":"10"},{"size":207,"mtime":1610514281840,"results":"13","hashOfConfig":"10"},{"size":2072,"mtime":1610511565970,"results":"14","hashOfConfig":"10"},{"size":688,"mtime":1610427324633,"results":"15","hashOfConfig":"10"},{"size":1139,"mtime":1610515095781,"results":"16","hashOfConfig":"10"},{"size":1978,"mtime":1610511548722,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1eeism",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"23"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"23"},"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/index.js",[],["42","43"],"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/reportWebVitals.ts",[],["44","45"],"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/NewPost.tsx",["46","47","48","49","50","51","52","53"],"import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nexport interface NewPostProps {\n  handleChange: (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => void;\n  savePost: (e: React.ChangeEvent<HTMLFormElement>) => void;\n}\n\nconst NewPost = ({ savePost, handleChange }: NewPostProps) => {\n  const { register, handleSubmit, setValue, errors } = useForm<NewPostProps>({});\n\n  const [newPost, setNewPost] = useState<NewPostProps>();\n\n  const onSubmit = handleSubmit((postData: any) => {\n    createNewPost(postData);\n  });\n\n  const createNewPost = async (postData: any) => {\n    console.log(postData)\n    const userId = localStorage.getItem('user') || '';\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({...postData, userId})\n    };\n    const response = await fetch(\n      \"http://localhost:3000/api/createPosts\",\n      requestOptions\n    );\n    const data = await response.json();\n    setNewPost(data);\n  };\n  \n\n\n  return (\n  <form onSubmit={onSubmit}>\n    <h1>Create New Post</h1>\n    <input\n      ref={register({ required: true })}\n      type=\"text\"\n      onChange={handleChange}\n      placeholder=\"title\"\n      size={39}\n      required\n      name=\"title\"\n    ></input>\n\n    <textarea\n      ref={register({ required: true })}\n      onChange={handleChange}\n      placeholder=\"contents\"\n      rows={8}\n      cols={41}\n      required\n      name=\"content\"\n    ></textarea>\n\n    <button type=\"submit\">Save Post</button>\n  </form>);\n};\n\nNewPost.defaultProps = {\n  handleChange: () => {},\n  savePost: () => {},\n};\n\nexport default NewPost;\n","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/App.tsx",["54"],"import React, { useState } from 'react';\nimport './App.css';\nimport { HomePage } from './components/HomePage';\n\n\n  const App:React.FC = ()  => {\n\n  return (\n    <HomePage /> \n    ) \n}\n\n\nexport default App;\n\n","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/UserRegister.tsx",["55","56","57"],"import React, {useEffect, useState} from \"react\";\nimport { useForm } from \"react-hook-form\";\n// import {BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nexport interface Profile {\n  username: string;\n  email: string;\n  password: string;\n};\n\nconst UserRegister: React.FC = () => {\n  const { register, handleSubmit, setValue, errors } = useForm<Profile>({});\n  const [newUser, setNewUser] = useState<Profile>();\n\n  const onSubmit = handleSubmit((userData: any) => {\n    createNewUser(userData)\n  })\n\n  \n  \n  const createNewUser = async (userData: any) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify( userData )\n    };\n    const response = await fetch(\"http://localhost:3000/api/signUp\", requestOptions);\n    const data = await response.json()\n    setNewUser(data);\n  }\n\n\n  \n  //   <Router> \n  //   <Link to=\"/\">Home</Link>\n  // <Router/>\n  \n  return (\n    <>\n    \n    <main>\n      <form onSubmit={onSubmit}>\n        <div>\n          <label htmlFor=\"username\">User Name</label>\n          <input\n            ref={register({ required: true })}\n            id=\"username\"\n            name=\"username\"\n            type=\"text\"\n          />\n          {errors.username && <div className=\"error\">Enter your name</div>}\n        </div>\n        <div>\n          <label htmlFor=\"password\">Password </label>\n          <input\n            ref={register({ required: true })}\n            id=\"password\"\n            name=\"password\"\n            type=\"text\"\n          />\n          {errors.password && <div className=\"error\">Enter your last name</div>}\n        </div>\n        <div>\n          <label htmlFor=\"email\">Email</label>\n          <input\n            ref={register({ required: true })}\n            id=\"email\"\n            name=\"email\"\n            type=\"text\"\n          />\n          {errors.email && <div className=\"error\">Enter your email</div>}\n        </div>\n        <button type=\"submit\">Save User</button>\n      </form>\n    </main>\n    </>\n  )\n}\nexport default UserRegister; \n","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/Post.tsx",[],["58","59"],"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/HomePage.tsx",["60","61","62","63"],"import React, {useState, useEffect} from 'react'\nimport UserRegister from './UserRegister';\nimport NewPost from './NewPost';\nimport UserLogin from './UserLogin';\nimport { BrowserRouter as Router,Switch, Route, Link } from \"react-router-dom\";\n\n\nexport const HomePage: React.FC = () => {\n  const [isLoggedIn, setLoginStatus] = useState(false);\n\n  const updateLoginStatus = (status: boolean) => {\n    setLoginStatus(status)\n  }\n\n  useEffect(() => {\n    getCurrentUser()\n  }, []);\n\n  const getCurrentUser = () => {\n    const response = localStorage.getItem('user')\n    if (response !== null)\n      setLoginStatus(true);\n  }\n  return (\n    <>\n      {/* <Router >\n      \n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n          <li>\n            <Link to=\"/topics\">Topics</Link>\n          </li>\n          <Router /> */}\n\n\n        { isLoggedIn ? \n        // new posts \n        <NewPost />\n        :<>\n        <UserRegister  />\n        <UserLogin onLogin={updateLoginStatus} onLogout={updateLoginStatus} />\n        </>\n        }\n  </>\n  )\n}","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/UserLogin.tsx",["64","65","66"],"import React, {useState, useEffect} from 'react'\nimport { useForm } from \"react-hook-form\";\n\n\nexport interface UserInformation {\n  username: string; \n  password: string;\n\n}\n\nexport interface UserLoginProps {\n  onLogin: (status: boolean) => void\n  onLogout: (status: boolean) => void\n}\n\nconst UserLogin: React.FC<UserLoginProps> = (props: UserLoginProps) => {\n  const {onLogin, onLogout} = props;\n  const { register, handleSubmit, setValue, errors } = useForm<UserInformation>({});\n\n  \n  const onSubmit = handleSubmit((userData: any) => {\n    loginUser(userData)\n  })\n\n  \n  const loginUser = async (userData: any) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify( userData )\n    };\n    const response = await fetch(\"http://localhost:3000/api/login\", requestOptions);\n    const data = await response.json()\n    if(data.accessToken) {\n      localStorage.setItem('user', JSON.stringify(data))\n      onLogin(true)\n      console.log(localStorage)\n    }\n\n  }\n\n  const logout = () => {\n    localStorage.removeItem('user')\n    onLogout(false)\n  }\n\n\n  useEffect(() => {\n  }, []);\n\n  \n  return (\n    <>\n    \n    <main>\n      <form onSubmit={onSubmit}>\n        <div>\n          <label htmlFor=\"username\">User Name</label>\n          <input\n            ref={register({ required: true })}\n            id=\"username\"\n            name=\"username\"\n            type=\"text\"\n          />\n          {errors.username && <div className=\"error\">Enter your username</div>}\n        </div>\n        <div>\n          <label htmlFor=\"password\">Password </label>\n          <input\n            ref={register({ required: true })}\n            id=\"password\"\n            name=\"password\"\n            type=\"text\"\n          />\n          {errors.password && <div className=\"error\">Enter your password</div>}\n        </div>\n        <button type=\"submit\">Login</button>\n      </form>\n    </main>\n    </>\n  )\n}\n\n\nexport default UserLogin ",{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":1,"column":27,"nodeType":"73","messageId":"74","endLine":1,"endColumn":36},{"ruleId":"71","severity":1,"message":"75","line":3,"column":27,"nodeType":"73","messageId":"74","endLine":3,"endColumn":33},{"ruleId":"71","severity":1,"message":"76","line":3,"column":34,"nodeType":"73","messageId":"74","endLine":3,"endColumn":40},{"ruleId":"71","severity":1,"message":"77","line":3,"column":42,"nodeType":"73","messageId":"74","endLine":3,"endColumn":47},{"ruleId":"71","severity":1,"message":"78","line":3,"column":49,"nodeType":"73","messageId":"74","endLine":3,"endColumn":53},{"ruleId":"71","severity":1,"message":"79","line":13,"column":35,"nodeType":"73","messageId":"74","endLine":13,"endColumn":43},{"ruleId":"71","severity":1,"message":"80","line":13,"column":45,"nodeType":"73","messageId":"74","endLine":13,"endColumn":51},{"ruleId":"71","severity":1,"message":"81","line":15,"column":10,"nodeType":"73","messageId":"74","endLine":15,"endColumn":17},{"ruleId":"71","severity":1,"message":"82","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":25},{"ruleId":"71","severity":1,"message":"72","line":1,"column":16,"nodeType":"73","messageId":"74","endLine":1,"endColumn":25},{"ruleId":"71","severity":1,"message":"79","line":12,"column":35,"nodeType":"73","messageId":"74","endLine":12,"endColumn":43},{"ruleId":"71","severity":1,"message":"83","line":13,"column":10,"nodeType":"73","messageId":"74","endLine":13,"endColumn":17},{"ruleId":"67","replacedBy":"84"},{"ruleId":"69","replacedBy":"85"},{"ruleId":"71","severity":1,"message":"75","line":5,"column":27,"nodeType":"73","messageId":"74","endLine":5,"endColumn":33},{"ruleId":"71","severity":1,"message":"76","line":5,"column":34,"nodeType":"73","messageId":"74","endLine":5,"endColumn":40},{"ruleId":"71","severity":1,"message":"77","line":5,"column":42,"nodeType":"73","messageId":"74","endLine":5,"endColumn":47},{"ruleId":"71","severity":1,"message":"78","line":5,"column":49,"nodeType":"73","messageId":"74","endLine":5,"endColumn":53},{"ruleId":"71","severity":1,"message":"82","line":1,"column":16,"nodeType":"73","messageId":"74","endLine":1,"endColumn":24},{"ruleId":"71","severity":1,"message":"79","line":18,"column":35,"nodeType":"73","messageId":"74","endLine":18,"endColumn":43},{"ruleId":"71","severity":1,"message":"86","line":42,"column":9,"nodeType":"73","messageId":"74","endLine":42,"endColumn":15},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'setValue' is assigned a value but never used.","'errors' is assigned a value but never used.","'newPost' is assigned a value but never used.","'useState' is defined but never used.","'newUser' is assigned a value but never used.",["87"],["88"],"'logout' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]