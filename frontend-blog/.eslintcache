[{"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/index.js":"1","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/reportWebVitals.ts":"2","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/NewPost.tsx":"3","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/App.tsx":"4","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/UserRegister.tsx":"5","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/Post.tsx":"6","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/HomePage.tsx":"7","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/UserLogin.tsx":"8","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/UpdatePost.tsx":"9","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/LogOut.tsx":"10","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/API.ts":"11","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/DisplayAllPosts.tsx":"12"},{"size":540,"mtime":1611286109099,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":1610301461108,"results":"15","hashOfConfig":"14"},{"size":2366,"mtime":1611286109096,"results":"16","hashOfConfig":"14"},{"size":533,"mtime":1612221505552,"results":"17","hashOfConfig":"14"},{"size":2423,"mtime":1612216258161,"results":"18","hashOfConfig":"14"},{"size":502,"mtime":1612216010951,"results":"19","hashOfConfig":"14"},{"size":992,"mtime":1612221159813,"results":"20","hashOfConfig":"14"},{"size":2453,"mtime":1611286109098,"results":"21","hashOfConfig":"14"},{"size":934,"mtime":1611286109097,"results":"22","hashOfConfig":"14"},{"size":334,"mtime":1610674758865,"results":"23","hashOfConfig":"14"},{"size":1460,"mtime":1612222227393,"results":"24","hashOfConfig":"14"},{"size":2250,"mtime":1612221398268,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"pors4t",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"31"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"31"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"31"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/index.js",[],["57","58"],"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/reportWebVitals.ts",[],["59","60"],"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/NewPost.tsx",["61","62","63","64","65","66"],"import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\n\nexport interface NewPostProps {\n  handleChange: (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => void;\n  savePost: (e: React.ChangeEvent<HTMLFormElement>) => void;\n}\n\nconst NewPost = ({ savePost, handleChange }: NewPostProps) => {\n  const [submitted, setSubmitted] = useState(false);\n  const { register, handleSubmit, setValue, errors } = useForm<NewPostProps>(\n    {}\n  );\n\n  const [newPost, setNewPost] = useState<NewPostProps>();\n\n  const onSubmit = handleSubmit((postData: any) => {\n    createNewPost(postData);\n  });\n\n  const createNewPost = async (postData: any) => {\n    console.log(postData);\n    const userId = localStorage.getItem(\"user\") || \"\";\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ ...postData, userId }),\n    };\n    const response = await fetch(\n      \"http://localhost:3000/api/createPosts\",\n      requestOptions\n    );\n    const data = await response.json();\n    setNewPost(data);\n    //after request I would like to redirect to another route to go to see all posts\n    // if(submitted) {\n    //   return <Redirect push to={{\n    //     pathname: '/allPosts'\n    //   }}\n    // }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className='inner'>  \n      <form className=\"post-form\" onSubmit={onSubmit}>\n        <h1 className='title'>Create New Post</h1>\n        <input className='input'\n          ref={register({ required: true })}\n          type=\"text\"\n          onChange={handleChange}\n          placeholder=\"title\"\n          size={39}\n          required\n          name=\"title\"\n        ></input>\n\n        <textarea className='content-form'\n          ref={register({ required: true })}\n          onChange={handleChange}\n          placeholder=\"contents\"\n          rows={8}\n          cols={41}\n          required\n          name=\"content\"\n        ></textarea>\n\n        <button className='btn-post' type=\"submit\">Create Post</button>\n      </form>\n    </div>\n    </div>\n  );\n};\n\nNewPost.defaultProps = {\n  handleChange: () => {},\n  savePost: () => {},\n};\n\nexport default NewPost;\n",["67","68"],"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/App.tsx",["69","70"],"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/UserRegister.tsx",["71","72","73","74","75","76","77","78"],"import React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n} from \"react-router-dom\";\n\nexport interface Profile {\n  username: string;\n  email: string;\n  password: string;\n}\n\nconst UserRegister: React.FC = () => {\n  const { register, handleSubmit, setValue, errors } = useForm<Profile>({});\n  const [newUser, setNewUser] = useState<Profile>();\n\n  const onSubmit = handleSubmit((userData: any) => {\n    createNewUser(userData);\n  });\n\n  const createNewUser = async (userData: any) => {\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(userData),\n    };\n    const response = await fetch(\n      \"http://localhost:3000/api/signUp\",\n      requestOptions\n    );\n    const data = await response.json();\n    setNewUser(data);\n  };\n\n\n\n  return (\n    <>\n      <div className='reg-container'>\n        <main className='sub-container'><span className='header'>Sign Up!</span>\n          <form className='form' onSubmit={onSubmit}> \n            <div className='username'>\n              <label htmlFor=\"username\">User Name</label>\n              <input\n                ref={register({ required: true })}\n                id=\"username\"\n                name=\"username\"\n                type=\"text\"\n              />\n              {errors.username && <div className=\"error\">Enter your name</div>}\n            </div>\n            <div className='password'>\n              <label htmlFor=\"password\">Password </label>\n              <input\n                ref={register({ required: true })}\n                id=\"password\"\n                name=\"password\"\n                type=\"text\"\n              />\n              {errors.password && (\n                <div className=\"error\">Enter your last name</div>\n              )}\n            </div>\n            <div className='email'>\n              <label htmlFor=\"email\">Email</label>\n              <input\n                ref={register({ required: true })}\n                id=\"email\"\n                name=\"email\"\n                type=\"text\"\n              />\n              {errors.email && <div className=\"error\">Enter your email</div>}\n            </div>\n            <button className='btn' type=\"submit\">Register User</button>\n          </form>\n        </main>\n      </div>\n    </>\n  );\n};\nexport default UserRegister;\n","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/Post.tsx",[],"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/HomePage.tsx",["79","80","81","82","83"],"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/UserLogin.tsx",["84","85","86"],"import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nexport interface UserInformation {\n  username: string;\n  password: string;\n}\n\nexport interface UserLoginProps {\n  onLogin: (status: boolean) => void;\n  onLogout: (status: boolean) => void;\n}\n\n\nconst UserLogin: React.FC<UserLoginProps> = (props: UserLoginProps) => {\n  const [user, setUser ] = useState()\n  const { onLogin, onLogout } = props;\n  const { register, handleSubmit, setValue, errors } = useForm<UserInformation>(\n    {}\n  );\n\n  const onSubmit = handleSubmit((userData: any) => {\n    loginUser(userData);\n  });\n\n  const loginUser = async (userData: any) => {\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(userData),\n    };\n    const response = await fetch(\n      \"http://localhost:3000/api/login\",\n      requestOptions\n    );\n    const data = await response.json();\n    if (data.accessToken) {\n      localStorage.setItem(\"user\", JSON.stringify(data));\n      onLogin(true);\n      setUser(data)\n      console.log(localStorage);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"user\");\n    onLogout(false);\n  };\n\n  useEffect(() => {}, []);\n\n  return (\n    <>\n    \n    <div className='log-container'> \n      <main className='main'>\n        <form className='login-form' onSubmit={onSubmit}><span className='header'>Welcome Log Back In!</span>\n          <div className='userlogin'>\n            <label htmlFor=\"username\">User Name</label>\n            <input\n              data-testid=\"username\"\n              ref={register({ required: true })}\n              id=\"username\"\n              name=\"username\"\n              type=\"text\"\n              />\n            {errors.username && (\n              <div className=\"error\">Enter your username</div>\n            )}\n          </div>\n          <div className='loginpw'>\n            <label htmlFor=\"password\">Password </label>\n            <input\n              data-testid=\"password\"\n              ref={register({ required: true })}\n              id=\"password\"\n              name=\"password\"\n              type=\"text\"\n              />\n            {errors.password && (\n              <div className=\"error\">Enter your password</div>\n              )}\n          </div>\n          <button className='btn' type=\"submit\">Login</button>\n        </form>\n      </main>\n    </div>\n    </>\n  );\n};\n\nexport default UserLogin;\n","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/UpdatePost.tsx",[],"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/LogOut.tsx",["87"],"import * as React from 'react';\n\nexport interface UserLoginProps {\n  onLogout: (status: boolean) => void;\n}\n\n\n\nconst LogOut: React.FC<UserLoginProps> = (props:UserLoginProps): JSX.Element => {\n  const {onLogout} = props \n  return (\n    <div>\n      {/* <button onClick={onLogout}></button> */}\n    </div>\n  )\n}\n\n\nexport default LogOut ","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/API.ts",["88"],"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/DisplayAllPosts.tsx",["89","90","91","92","93","94","95","96","97"],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":1,"column":27,"nodeType":"104","messageId":"105","endLine":1,"endColumn":36},{"ruleId":"102","severity":1,"message":"106","line":13,"column":10,"nodeType":"104","messageId":"105","endLine":13,"endColumn":19},{"ruleId":"102","severity":1,"message":"107","line":13,"column":21,"nodeType":"104","messageId":"105","endLine":13,"endColumn":33},{"ruleId":"102","severity":1,"message":"108","line":14,"column":35,"nodeType":"104","messageId":"105","endLine":14,"endColumn":43},{"ruleId":"102","severity":1,"message":"109","line":14,"column":45,"nodeType":"104","messageId":"105","endLine":14,"endColumn":51},{"ruleId":"102","severity":1,"message":"110","line":18,"column":10,"nodeType":"104","messageId":"105","endLine":18,"endColumn":17},{"ruleId":"98","replacedBy":"111"},{"ruleId":"100","replacedBy":"112"},{"ruleId":"102","severity":1,"message":"113","line":7,"column":3,"nodeType":"104","messageId":"105","endLine":7,"endColumn":7},{"ruleId":"102","severity":1,"message":"114","line":9,"column":3,"nodeType":"104","messageId":"105","endLine":9,"endColumn":11},{"ruleId":"102","severity":1,"message":"103","line":1,"column":17,"nodeType":"104","messageId":"105","endLine":1,"endColumn":26},{"ruleId":"102","severity":1,"message":"115","line":4,"column":20,"nodeType":"104","messageId":"105","endLine":4,"endColumn":26},{"ruleId":"102","severity":1,"message":"116","line":5,"column":3,"nodeType":"104","messageId":"105","endLine":5,"endColumn":9},{"ruleId":"102","severity":1,"message":"117","line":6,"column":3,"nodeType":"104","messageId":"105","endLine":6,"endColumn":8},{"ruleId":"102","severity":1,"message":"113","line":7,"column":3,"nodeType":"104","messageId":"105","endLine":7,"endColumn":7},{"ruleId":"102","severity":1,"message":"114","line":8,"column":3,"nodeType":"104","messageId":"105","endLine":8,"endColumn":11},{"ruleId":"102","severity":1,"message":"108","line":18,"column":35,"nodeType":"104","messageId":"105","endLine":18,"endColumn":43},{"ruleId":"102","severity":1,"message":"118","line":19,"column":10,"nodeType":"104","messageId":"105","endLine":19,"endColumn":17},{"ruleId":"102","severity":1,"message":"119","line":3,"column":8,"nodeType":"104","messageId":"105","endLine":3,"endColumn":15},{"ruleId":"102","severity":1,"message":"115","line":5,"column":27,"nodeType":"104","messageId":"105","endLine":5,"endColumn":33},{"ruleId":"102","severity":1,"message":"116","line":5,"column":34,"nodeType":"104","messageId":"105","endLine":5,"endColumn":40},{"ruleId":"102","severity":1,"message":"117","line":5,"column":42,"nodeType":"104","messageId":"105","endLine":5,"endColumn":47},{"ruleId":"102","severity":1,"message":"113","line":5,"column":49,"nodeType":"104","messageId":"105","endLine":5,"endColumn":53},{"ruleId":"102","severity":1,"message":"120","line":16,"column":10,"nodeType":"104","messageId":"105","endLine":16,"endColumn":14},{"ruleId":"102","severity":1,"message":"108","line":18,"column":35,"nodeType":"104","messageId":"105","endLine":18,"endColumn":43},{"ruleId":"102","severity":1,"message":"121","line":45,"column":9,"nodeType":"104","messageId":"105","endLine":45,"endColumn":15},{"ruleId":"102","severity":1,"message":"122","line":10,"column":10,"nodeType":"104","messageId":"105","endLine":10,"endColumn":18},{"ruleId":"102","severity":1,"message":"123","line":26,"column":11,"nodeType":"104","messageId":"105","endLine":26,"endColumn":47},{"ruleId":"102","severity":1,"message":"124","line":1,"column":38,"nodeType":"104","messageId":"105","endLine":1,"endColumn":49},{"ruleId":"102","severity":1,"message":"119","line":2,"column":8,"nodeType":"104","messageId":"105","endLine":2,"endColumn":15},{"ruleId":"102","severity":1,"message":"125","line":3,"column":8,"nodeType":"104","messageId":"105","endLine":3,"endColumn":12},{"ruleId":"102","severity":1,"message":"126","line":4,"column":8,"nodeType":"104","messageId":"105","endLine":4,"endColumn":18},{"ruleId":"102","severity":1,"message":"127","line":26,"column":11,"nodeType":"104","messageId":"105","endLine":26,"endColumn":19},{"ruleId":"102","severity":1,"message":"128","line":26,"column":21,"nodeType":"104","messageId":"105","endLine":26,"endColumn":33},{"ruleId":"102","severity":1,"message":"108","line":26,"column":35,"nodeType":"104","messageId":"105","endLine":26,"endColumn":43},{"ruleId":"102","severity":1,"message":"109","line":26,"column":45,"nodeType":"104","messageId":"105","endLine":26,"endColumn":51},{"ruleId":"102","severity":1,"message":"129","line":52,"column":9,"nodeType":"104","messageId":"105","endLine":52,"endColumn":20},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'submitted' is assigned a value but never used.","'setSubmitted' is assigned a value but never used.","'setValue' is assigned a value but never used.","'errors' is assigned a value but never used.","'newPost' is assigned a value but never used.",["130"],["131"],"'Link' is defined but never used.","'Redirect' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'newUser' is assigned a value but never used.","'NewPost' is defined but never used.","'user' is assigned a value but never used.","'logout' is assigned a value but never used.","'onLogout' is assigned a value but never used.","'saveTodo' is assigned a value but never used.","'useCallback' is defined but never used.","'Post' is defined but never used.","'UpdatePost' is defined but never used.","'register' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'deletePosts' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]