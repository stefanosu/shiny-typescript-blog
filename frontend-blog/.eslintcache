[{"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/index.js":"1","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/reportWebVitals.ts":"2","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/NewPost.tsx":"3","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/App.tsx":"4","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/UserRegister.tsx":"5","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/Post.tsx":"6","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/HomePage.tsx":"7","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/UserLogin.tsx":"8","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/AllPosts.tsx":"9","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/UpdatePost.tsx":"10"},{"size":500,"mtime":1610262456122,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1610301461108,"results":"13","hashOfConfig":"12"},{"size":1893,"mtime":1610519967056,"results":"14","hashOfConfig":"12"},{"size":683,"mtime":1610520834848,"results":"15","hashOfConfig":"12"},{"size":2079,"mtime":1610518864420,"results":"16","hashOfConfig":"12"},{"size":688,"mtime":1610427324633,"results":"17","hashOfConfig":"12"},{"size":1139,"mtime":1610515095781,"results":"18","hashOfConfig":"12"},{"size":1978,"mtime":1610511548722,"results":"19","hashOfConfig":"12"},{"size":3757,"mtime":1610519628365,"results":"20","hashOfConfig":"12"},{"size":913,"mtime":1610412699398,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1eeism",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"27"},{"filePath":"31","messages":"32","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"27"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"27"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"27"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"27"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/index.js",[],["49","50"],"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/reportWebVitals.ts",[],["51","52"],"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/NewPost.tsx",["53","54","55","56","57","58","59","60"],"import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { BrowserRouter as Router, Route, Link, Switch, Redirect } from \"react-router-dom\";\n\nexport interface NewPostProps {\n  handleChange: (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => void;\n  savePost: (e: React.ChangeEvent<HTMLFormElement>) => void;\n}\n\nconst NewPost = ({ savePost, handleChange }: NewPostProps) => {\n  const { register, handleSubmit, setValue, errors } = useForm<NewPostProps>({});\n\n  const [newPost, setNewPost] = useState<NewPostProps>();\n\n  const onSubmit = handleSubmit((postData: any) => {\n    createNewPost(postData);\n  });\n\n  const createNewPost = async (postData: any) => {\n    console.log(postData)\n    const userId = localStorage.getItem('user') || '';\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({...postData, userId})\n    };\n    const response = await fetch(\n      \"http://localhost:3000/api/createPosts\",\n      requestOptions\n    );\n    const data = await response.json();\n    setNewPost(data); \n    //after request I would like to redirect to another route to go to see all posts \n    <Redirect to=\"/allPosts\" />\n\n  };\n  \n\n\n  return (\n  <form onSubmit={onSubmit}>\n    <h1>Create New Post</h1>\n    <input\n      ref={register({ required: true })}\n      type=\"text\"\n      onChange={handleChange}\n      placeholder=\"title\"\n      size={39}\n      required\n      name=\"title\"\n    ></input>\n\n    <textarea\n      ref={register({ required: true })}\n      onChange={handleChange}\n      placeholder=\"contents\"\n      rows={8}\n      cols={41}\n      required\n      name=\"content\"\n    ></textarea>\n\n    <button type=\"submit\">Create Post</button>\n  </form>);\n};\n\nNewPost.defaultProps = {\n  handleChange: () => {},\n  savePost: () => {},\n};\n\nexport default NewPost;\n","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/App.tsx",["61"],"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/UserRegister.tsx",["62","63","64","65","66","67","68","69"],"import React, {useEffect, useState} from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\n\nexport interface Profile {\n  username: string;\n  email: string;\n  password: string;\n};\n\nconst UserRegister: React.FC = () => {\n  const { register, handleSubmit, setValue, errors } = useForm<Profile>({});\n  const [newUser, setNewUser] = useState<Profile>();\n\n  const onSubmit = handleSubmit((userData: any) => {\n    createNewUser(userData)\n  })\n\n  \n  \n  const createNewUser = async (userData: any) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify( userData )\n    };\n    const response = await fetch(\"http://localhost:3000/api/signUp\", requestOptions);\n    const data = await response.json()\n    setNewUser(data);\n  }\n\n\n  \n  //   <Router> \n  //   <Link to=\"/\">Home</Link>\n  // <Router/>\n  \n  return (\n    <>\n    \n    <main>\n      <form onSubmit={onSubmit}>\n        <div>\n          <label htmlFor=\"username\">User Name</label>\n          <input\n            ref={register({ required: true })}\n            id=\"username\"\n            name=\"username\"\n            type=\"text\"\n          />\n          {errors.username && <div className=\"error\">Enter your name</div>}\n        </div>\n        <div>\n          <label htmlFor=\"password\">Password </label>\n          <input\n            ref={register({ required: true })}\n            id=\"password\"\n            name=\"password\"\n            type=\"text\"\n          />\n          {errors.password && <div className=\"error\">Enter your last name</div>}\n        </div>\n        <div>\n          <label htmlFor=\"email\">Email</label>\n          <input\n            ref={register({ required: true })}\n            id=\"email\"\n            name=\"email\"\n            type=\"text\"\n          />\n          {errors.email && <div className=\"error\">Enter your email</div>}\n        </div>\n        <button type=\"submit\">Save User</button>\n      </form>\n    </main>\n    </>\n  )\n}\nexport default UserRegister; \n","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/Post.tsx",[],"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/HomePage.tsx",["70","71","72","73"],"import React, {useState, useEffect} from 'react'\nimport UserRegister from './UserRegister';\nimport NewPost from './NewPost';\nimport UserLogin from './UserLogin';\nimport { BrowserRouter as Router,Switch, Route, Link } from \"react-router-dom\";\n\n\nexport const HomePage: React.FC = () => {\n  const [isLoggedIn, setLoginStatus] = useState(false);\n\n  const updateLoginStatus = (status: boolean) => {\n    setLoginStatus(status)\n  }\n\n  useEffect(() => {\n    getCurrentUser()\n  }, []);\n\n  const getCurrentUser = () => {\n    const response = localStorage.getItem('user')\n    if (response !== null)\n      setLoginStatus(true);\n  }\n  return (\n    <>\n      {/* <Router >\n      \n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n          <li>\n            <Link to=\"/topics\">Topics</Link>\n          </li>\n          <Router /> */}\n\n\n        { isLoggedIn ? \n        // new posts \n        <NewPost />\n        :<>\n        <UserRegister  />\n        <UserLogin onLogin={updateLoginStatus} onLogout={updateLoginStatus} />\n        </>\n        }\n  </>\n  )\n}","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/UserLogin.tsx",["74","75","76"],"import React, {useState, useEffect} from 'react'\nimport { useForm } from \"react-hook-form\";\n\n\nexport interface UserInformation {\n  username: string; \n  password: string;\n\n}\n\nexport interface UserLoginProps {\n  onLogin: (status: boolean) => void\n  onLogout: (status: boolean) => void\n}\n\nconst UserLogin: React.FC<UserLoginProps> = (props: UserLoginProps) => {\n  const {onLogin, onLogout} = props;\n  const { register, handleSubmit, setValue, errors } = useForm<UserInformation>({});\n\n  \n  const onSubmit = handleSubmit((userData: any) => {\n    loginUser(userData)\n  })\n\n  \n  const loginUser = async (userData: any) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify( userData )\n    };\n    const response = await fetch(\"http://localhost:3000/api/login\", requestOptions);\n    const data = await response.json()\n    if(data.accessToken) {\n      localStorage.setItem('user', JSON.stringify(data))\n      onLogin(true)\n      console.log(localStorage)\n    }\n\n  }\n\n  const logout = () => {\n    localStorage.removeItem('user')\n    onLogout(false)\n  }\n\n\n  useEffect(() => {\n  }, []);\n\n  \n  return (\n    <>\n    \n    <main>\n      <form onSubmit={onSubmit}>\n        <div>\n          <label htmlFor=\"username\">User Name</label>\n          <input\n            ref={register({ required: true })}\n            id=\"username\"\n            name=\"username\"\n            type=\"text\"\n          />\n          {errors.username && <div className=\"error\">Enter your username</div>}\n        </div>\n        <div>\n          <label htmlFor=\"password\">Password </label>\n          <input\n            ref={register({ required: true })}\n            id=\"password\"\n            name=\"password\"\n            type=\"text\"\n          />\n          {errors.password && <div className=\"error\">Enter your password</div>}\n        </div>\n        <button type=\"submit\">Login</button>\n      </form>\n    </main>\n    </>\n  )\n}\n\n\nexport default UserLogin ","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/AllPosts.tsx",["77","78","79","80","81","82","83"],"import React, { useState, useEffect } from \"react\";\nimport NewPost from \"./NewPost\";\nimport Post from \"./Post\";\nimport UpdatePost from \"./UpdatePost\"\nimport { useForm } from \"react-hook-form\";\n\ninterface PostType {\n  title: string;\n  content: string;\n  id: number;\n}\n\n\nconst DisplayAllPosts = () => {\n  const [state, setState] = useState({title: '', content: ''});\n\n  const [allPosts, setAllPosts] = useState<PostType[]>([]);\n\n  const [isCreateNewPost, setIsCreateNewPost] = useState(false);\n  const [isUpdatePost, setIsUpdatePost] = useState(false);\n  const [editPostId, setEditPostId] = useState(0);\n\n\n  const { register, handleSubmit, setValue, errors } = useForm<PostType>({});\n\n  \n  const getAllPosts = async (postsData: any) => {\n    const requestOptions = {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify( postsData )\n    };\n    const response = await fetch(\"http://localhost:3000/api/getPosts\", requestOptions);\n    const data = await response.json()\n\n  }\n\n  // useEffect(() => {\n  //   getAllPosts()\n  // }, []);\n\n\n\n  const handleChange = (e:React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const {name, value} = e.target\n    setState((s) => ({\n      ...s,  \n      [name]: value\n    }))\n  }\n\n  const toggleCreateNewPost = () => {\n    setIsCreateNewPost(!isCreateNewPost);\n  };\n  const toggleUpdatePostComponent = () => {\n    if(isUpdatePost) {\n      setIsUpdatePost(!isUpdatePost)\n      setState({title: '', content:\"\"})\n    } else {\n      setIsUpdatePost(!isUpdatePost)\n      const post = allPosts.find(post => {\n        return post.id === editPostId;\n      }); \n      if(post) {\n        setState(post)\n      }\n    }\n  }\n  const editPost = (id:number) => {\n    setEditPostId(id);\n    console.log(id)\n    toggleUpdatePostComponent();\n  };\n\n\n  const deletePost = (id:number) => {\n    // setDeletePost(id);\n    setAllPosts(allPosts.filter( post => post.id !== id ));\n\n  };\n\n\n\n  const updatePost = (e:React.ChangeEvent) => {\n    e.preventDefault();\n    const updatedPost = allPosts.map(eachPost => {\n      if (eachPost.id === editPostId) {\n        console.log([eachPost.id, editPostId] )\n        return {\n          ...eachPost,\n          title: state.title || eachPost.title,\n          content: state.content || eachPost.content\n        };\n      }\n      console.log(eachPost)\n      return eachPost;\n    });\n    setAllPosts(updatedPost);\n    toggleUpdatePostComponent();\n  };\n\n  const savePost = (e: React.ChangeEvent)=> {\n    e.preventDefault();\n    debugger\n    const id = Date.now();\n    setAllPosts([...allPosts, { title: state.title, content: state.content, id}]);\n    console.log(allPosts);\n    setState({title: '', content: ''});\n    toggleCreateNewPost();\n  };\n\n  if (isCreateNewPost) {\n    return (\n      <>\n        <NewPost\n          handleChange={handleChange}\n          savePost={savePost}\n        />\n      </>\n    );\n  }\n  else if (isUpdatePost) {\n    \n    return (\n      <UpdatePost\n        title={state.title}\n        content={state.content}\n        updatePost={updatePost}\n        handleChange={handleChange}\n      />\n    );\n  }\n  return (\n    <>\n      <h2>All Posts</h2>\n      {!allPosts.length ? (\n        <div>\n          <h3>There is nothing to see here!</h3>\n        </div>\n      ) : (\n        allPosts.map(eachPost => {\n          return (\n            <Post\n              id={eachPost.id}\n              key={eachPost.id}\n              title={eachPost.title}\n              content={eachPost.content}\n              deletePost={deletePost}\n              editPost={editPost}\n            />\n          );\n        })\n      )}\n      <br />\n      <br />\n      <button onClick={toggleCreateNewPost}>Create New</button>\n    </>\n  );\n};\nexport default DisplayAllPosts;\n","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/UpdatePost.tsx",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":1,"column":27,"nodeType":"90","messageId":"91","endLine":1,"endColumn":36},{"ruleId":"88","severity":1,"message":"92","line":3,"column":27,"nodeType":"90","messageId":"91","endLine":3,"endColumn":33},{"ruleId":"88","severity":1,"message":"93","line":3,"column":35,"nodeType":"90","messageId":"91","endLine":3,"endColumn":40},{"ruleId":"88","severity":1,"message":"94","line":3,"column":42,"nodeType":"90","messageId":"91","endLine":3,"endColumn":46},{"ruleId":"88","severity":1,"message":"95","line":3,"column":48,"nodeType":"90","messageId":"91","endLine":3,"endColumn":54},{"ruleId":"88","severity":1,"message":"96","line":13,"column":35,"nodeType":"90","messageId":"91","endLine":13,"endColumn":43},{"ruleId":"88","severity":1,"message":"97","line":13,"column":45,"nodeType":"90","messageId":"91","endLine":13,"endColumn":51},{"ruleId":"88","severity":1,"message":"98","line":15,"column":10,"nodeType":"90","messageId":"91","endLine":15,"endColumn":17},{"ruleId":null,"fatal":true,"severity":2,"message":"99","line":30,"column":0},{"ruleId":"88","severity":1,"message":"89","line":1,"column":16,"nodeType":"90","messageId":"91","endLine":1,"endColumn":25},{"ruleId":"88","severity":1,"message":"92","line":3,"column":26,"nodeType":"90","messageId":"91","endLine":3,"endColumn":32},{"ruleId":"88","severity":1,"message":"95","line":3,"column":34,"nodeType":"90","messageId":"91","endLine":3,"endColumn":40},{"ruleId":"88","severity":1,"message":"93","line":3,"column":42,"nodeType":"90","messageId":"91","endLine":3,"endColumn":47},{"ruleId":"88","severity":1,"message":"94","line":3,"column":49,"nodeType":"90","messageId":"91","endLine":3,"endColumn":53},{"ruleId":"88","severity":1,"message":"100","line":3,"column":55,"nodeType":"90","messageId":"91","endLine":3,"endColumn":63},{"ruleId":"88","severity":1,"message":"96","line":12,"column":35,"nodeType":"90","messageId":"91","endLine":12,"endColumn":43},{"ruleId":"88","severity":1,"message":"101","line":13,"column":10,"nodeType":"90","messageId":"91","endLine":13,"endColumn":17},{"ruleId":"88","severity":1,"message":"92","line":5,"column":27,"nodeType":"90","messageId":"91","endLine":5,"endColumn":33},{"ruleId":"88","severity":1,"message":"95","line":5,"column":34,"nodeType":"90","messageId":"91","endLine":5,"endColumn":40},{"ruleId":"88","severity":1,"message":"93","line":5,"column":42,"nodeType":"90","messageId":"91","endLine":5,"endColumn":47},{"ruleId":"88","severity":1,"message":"94","line":5,"column":49,"nodeType":"90","messageId":"91","endLine":5,"endColumn":53},{"ruleId":"88","severity":1,"message":"102","line":1,"column":16,"nodeType":"90","messageId":"91","endLine":1,"endColumn":24},{"ruleId":"88","severity":1,"message":"96","line":18,"column":35,"nodeType":"90","messageId":"91","endLine":18,"endColumn":43},{"ruleId":"88","severity":1,"message":"103","line":42,"column":9,"nodeType":"90","messageId":"91","endLine":42,"endColumn":15},{"ruleId":"88","severity":1,"message":"89","line":1,"column":27,"nodeType":"90","messageId":"91","endLine":1,"endColumn":36},{"ruleId":"88","severity":1,"message":"104","line":24,"column":11,"nodeType":"90","messageId":"91","endLine":24,"endColumn":19},{"ruleId":"88","severity":1,"message":"105","line":24,"column":21,"nodeType":"90","messageId":"91","endLine":24,"endColumn":33},{"ruleId":"88","severity":1,"message":"96","line":24,"column":35,"nodeType":"90","messageId":"91","endLine":24,"endColumn":43},{"ruleId":"88","severity":1,"message":"97","line":24,"column":45,"nodeType":"90","messageId":"91","endLine":24,"endColumn":51},{"ruleId":"88","severity":1,"message":"106","line":27,"column":9,"nodeType":"90","messageId":"91","endLine":27,"endColumn":20},{"ruleId":"88","severity":1,"message":"107","line":34,"column":11,"nodeType":"90","messageId":"91","endLine":34,"endColumn":15},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'Switch' is defined but never used.","'setValue' is assigned a value but never used.","'errors' is assigned a value but never used.","'newPost' is assigned a value but never used.","Parsing error: ')' expected.","'Redirect' is defined but never used.","'newUser' is assigned a value but never used.","'useState' is defined but never used.","'logout' is assigned a value but never used.","'register' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'getAllPosts' is assigned a value but never used.","'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]