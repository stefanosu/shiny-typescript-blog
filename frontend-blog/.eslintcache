[{"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/index.js":"1","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/reportWebVitals.ts":"2","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/NewPost.tsx":"3","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/App.tsx":"4","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/UserRegister.tsx":"5","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/Post.tsx":"6","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/HomePage.tsx":"7","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/UserLogin.tsx":"8","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/AllPosts.tsx":"9","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/UpdatePost.tsx":"10","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/LogOut.tsx":"11"},{"size":500,"mtime":1611285926252,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1610301461108,"results":"14","hashOfConfig":"13"},{"size":2325,"mtime":1611285926247,"results":"15","hashOfConfig":"13"},{"size":525,"mtime":1611285926243,"results":"16","hashOfConfig":"13"},{"size":2485,"mtime":1610554582435,"results":"17","hashOfConfig":"13"},{"size":688,"mtime":1611285926248,"results":"18","hashOfConfig":"13"},{"size":937,"mtime":1611285926245,"results":"19","hashOfConfig":"13"},{"size":2395,"mtime":1611285926250,"results":"20","hashOfConfig":"13"},{"size":3757,"mtime":1611285926244,"results":"21","hashOfConfig":"13"},{"size":913,"mtime":1611285926249,"results":"22","hashOfConfig":"13"},{"size":334,"mtime":1610674758865,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pors4t",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/index.js",[],"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/reportWebVitals.ts",[],["54","55"],"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/NewPost.tsx",["56","57","58","59","60","61"],"import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\n\nexport interface NewPostProps {\n  handleChange: (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => void;\n  savePost: (e: React.ChangeEvent<HTMLFormElement>) => void;\n}\n\nconst NewPost = ({ savePost, handleChange }: NewPostProps) => {\n  const [submitted, setSubmitted] = useState(false);\n  const { register, handleSubmit, setValue, errors } = useForm<NewPostProps>(\n    {}\n  );\n\n  const [newPost, setNewPost] = useState<NewPostProps>();\n\n  const onSubmit = handleSubmit((postData: any) => {\n    createNewPost(postData);\n  });\n\n  const createNewPost = async (postData: any) => {\n    console.log(postData);\n    const userId = localStorage.getItem(\"user\") || \"\";\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ ...postData, userId }),\n    };\n    const response = await fetch(\n      \"http://localhost:3000/api/createPosts\",\n      requestOptions\n    );\n    const data = await response.json();\n    setNewPost(data);\n    //after request I would like to redirect to another route to go to see all posts\n    // if(submitted) {\n    //   return <Redirect push to={{\n    //     pathname: '/allPosts'\n    //   }}\n    // }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className='inner'>  \n      <form className=\"post-form\" onSubmit={onSubmit}>\n        <h1 className='title'>Create New Post</h1>\n        <input className='input'\n          ref={register({ required: true })}\n          type=\"text\"\n          onChange={handleChange}\n          placeholder=\"title\"\n          size={39}\n          required\n          name=\"title\"\n        ></input>\n\n        <textarea className='content-form'\n          ref={register({ required: true })}\n          onChange={handleChange}\n          placeholder=\"contents\"\n          rows={8}\n          cols={41}\n          required\n          name=\"content\"\n        ></textarea>\n\n        <button className='btn-post' type=\"submit\">Create Post</button>\n      </form>\n    </div>\n    </div>\n  );\n};\n\nNewPost.defaultProps = {\n  handleChange: () => {},\n  savePost: () => {},\n};\n\nexport default NewPost;\n","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/App.tsx",["62","63"],"import React from \"react\";\nimport \"./App.css\";\nimport { HomePage } from \"./components/HomePage\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\n\nimport DisplayAllPosts from \"./components/AllPosts\";\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact component={HomePage} />\n          <Route path=\"/allPosts\" component={DisplayAllPosts} />\n        </Switch>\n      </Router>\n    </>\n  );\n};\n\nexport default App;\n","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/UserRegister.tsx",["64","65","66","67","68","69","70","71"],"import React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n} from \"react-router-dom\";\n\nexport interface Profile {\n  username: string;\n  email: string;\n  password: string;\n}\n\nconst UserRegister: React.FC = () => {\n  const { register, handleSubmit, setValue, errors } = useForm<Profile>({});\n  const [newUser, setNewUser] = useState<Profile>();\n\n  const onSubmit = handleSubmit((userData: any) => {\n    createNewUser(userData);\n  });\n\n  const createNewUser = async (userData: any) => {\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(userData),\n    };\n    const response = await fetch(\n      \"http://localhost:3000/api/signUp\",\n      requestOptions\n    );\n    const data = await response.json();\n    setNewUser(data);\n  };\n\n  //   <Router>\n  //   <Link to=\"/\">Home</Link>\n  // <Router/>\n\n  return (\n    <>\n      <div className='reg-container'>\n        <main className='sub-container'><span className='header'>Sign Up!</span>\n          <form className='form' onSubmit={onSubmit}> \n            <div className='username'>\n              <label htmlFor=\"username\">User Name</label>\n              <input\n                ref={register({ required: true })}\n                id=\"username\"\n                name=\"username\"\n                type=\"text\"\n              />\n              {errors.username && <div className=\"error\">Enter your name</div>}\n            </div>\n            <div className='password'>\n              <label htmlFor=\"password\">Password </label>\n              <input\n                ref={register({ required: true })}\n                id=\"password\"\n                name=\"password\"\n                type=\"text\"\n              />\n              {errors.password && (\n                <div className=\"error\">Enter your last name</div>\n              )}\n            </div>\n            <div className='email'>\n              <label htmlFor=\"email\">Email</label>\n              <input\n                ref={register({ required: true })}\n                id=\"email\"\n                name=\"email\"\n                type=\"text\"\n              />\n              {errors.email && <div className=\"error\">Enter your email</div>}\n            </div>\n            <button className='btn' type=\"submit\">Register User</button>\n          </form>\n        </main>\n      </div>\n    </>\n  );\n};\nexport default UserRegister;\n","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/Post.tsx",[],"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/HomePage.tsx",["72","73","74","75","76"],"import React, {useState, useEffect} from 'react'\nimport UserRegister from './UserRegister';\nimport NewPost from './NewPost';\nimport UserLogin from './UserLogin';\nimport { BrowserRouter as Router,Switch, Route, Link } from \"react-router-dom\";\nimport LogOut from './LogOut';\n\n\nexport const HomePage: React.FC = () => {\n  const [isLoggedIn, setLoginStatus] = useState(false);\n\n  const updateLoginStatus = (status: boolean) => {\n    setLoginStatus(status)\n  }\n\n  useEffect(() => {\n    getCurrentUser()\n  }, []);\n\n  const getCurrentUser = () => {\n    const response = localStorage.getItem('user')\n    if (response !== null)\n      setLoginStatus(true);\n  }\n\n  \n  return (\n    <>\n        { isLoggedIn ? \n        // new posts \n        <NewPost /> \n        :<>\n        <UserRegister  />\n        <UserLogin onLogin={updateLoginStatus} onLogout={updateLoginStatus} />\n        <LogOut onLogout={updateLoginStatus}/>\n        </>\n        }\n  </>\n  )\n}","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/UserLogin.tsx",["77","78","79"],"import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nexport interface UserInformation {\n  username: string;\n  password: string;\n}\n\nexport interface UserLoginProps {\n  onLogin: (status: boolean) => void;\n  onLogout: (status: boolean) => void;\n}\n\n\nconst UserLogin: React.FC<UserLoginProps> = (props: UserLoginProps) => {\n  const [user, setUser ] = useState()\n  const { onLogin, onLogout } = props;\n  const { register, handleSubmit, setValue, errors } = useForm<UserInformation>(\n    {}\n  );\n\n  const onSubmit = handleSubmit((userData: any) => {\n    loginUser(userData);\n  });\n\n  const loginUser = async (userData: any) => {\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(userData),\n    };\n    const response = await fetch(\n      \"http://localhost:3000/api/login\",\n      requestOptions\n    );\n    const data = await response.json();\n    if (data.accessToken) {\n      localStorage.setItem(\"user\", JSON.stringify(data));\n      onLogin(true);\n      setUser(data)\n      console.log(localStorage);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"user\");\n    onLogout(false);\n  };\n\n  useEffect(() => {}, []);\n\n  return (\n    <>\n    \n    <div className='log-container'> \n      <main className='main'>\n        <form className='login-form' onSubmit={onSubmit}><span className='header'>Welcome Log Back In!</span>\n          <div className='userlogin'>\n            <label htmlFor=\"username\">User Name</label>\n            <input\n              data-testid=\"username\"\n              ref={register({ required: true })}\n              id=\"username\"\n              name=\"username\"\n              type=\"text\"\n              />\n            {errors.username && (\n              <div className=\"error\">Enter your username</div>\n            )}\n          </div>\n          <div className='loginpw'>\n            <label htmlFor=\"password\">Password </label>\n            <input\n              data-testid=\"password\"\n              ref={register({ required: true })}\n              id=\"password\"\n              name=\"password\"\n              type=\"text\"\n              />\n            {errors.password && (\n              <div className=\"error\">Enter your password</div>\n              )}\n          </div>\n          <button className='btn' type=\"submit\">Login</button>\n        </form>\n      </main>\n    </div>\n    </>\n  );\n};\n\nexport default UserLogin;\n","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/AllPosts.tsx",["80","81","82","83","84","85","86","87","88"],"import React, { useState, useEffect } from \"react\";\nimport NewPost from \"./NewPost\";\nimport Post from \"./Post\";\nimport UpdatePost from \"./UpdatePost\"\nimport { useForm } from \"react-hook-form\";\n\ninterface PostType {\n  title: string;\n  content: string;\n  id: number;\n}\n\n\nconst DisplayAllPosts = () => {\n  const [state, setState] = useState({title: '', content: ''});\n\n  const [allPosts, setAllPosts] = useState<PostType[]>([]);\n\n  const [isCreateNewPost, setIsCreateNewPost] = useState(false);\n  const [isUpdatePost, setIsUpdatePost] = useState(false);\n  const [editPostId, setEditPostId] = useState(0);\n\n\n  const { register, handleSubmit, setValue, errors } = useForm<PostType>({});\n\n  \n  const getAllPosts = async (postsData: any) => {\n    const requestOptions = {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify( postsData )\n    };\n    const response = await fetch(\"http://localhost:3000/api/getPosts\", requestOptions);\n    const data = await response.json()\n\n  }\n\n  // useEffect(() => {\n  //   getAllPosts()\n  // }, []);\n\n\n\n  const handleChange = (e:React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const {name, value} = e.target\n    setState((s) => ({\n      ...s,  \n      [name]: value\n    }))\n  }\n\n  const toggleCreateNewPost = () => {\n    setIsCreateNewPost(!isCreateNewPost);\n  };\n  const toggleUpdatePostComponent = () => {\n    if(isUpdatePost) {\n      setIsUpdatePost(!isUpdatePost)\n      setState({title: '', content:\"\"})\n    } else {\n      setIsUpdatePost(!isUpdatePost)\n      const post = allPosts.find(post => {\n        return post.id === editPostId;\n      }); \n      if(post) {\n        setState(post)\n      }\n    }\n  }\n  const editPost = (id:number) => {\n    setEditPostId(id);\n    console.log(id)\n    toggleUpdatePostComponent();\n  };\n\n\n  const deletePost = (id:number) => {\n    // setDeletePost(id);\n    setAllPosts(allPosts.filter( post => post.id !== id ));\n\n  };\n\n\n\n  const updatePost = (e:React.ChangeEvent) => {\n    e.preventDefault();\n    const updatedPost = allPosts.map(eachPost => {\n      if (eachPost.id === editPostId) {\n        console.log([eachPost.id, editPostId] )\n        return {\n          ...eachPost,\n          title: state.title || eachPost.title,\n          content: state.content || eachPost.content\n        };\n      }\n      console.log(eachPost)\n      return eachPost;\n    });\n    setAllPosts(updatedPost);\n    toggleUpdatePostComponent();\n  };\n\n  const savePost = (e: React.ChangeEvent)=> {\n    e.preventDefault();\n    debugger\n    const id = Date.now();\n    setAllPosts([...allPosts, { title: state.title, content: state.content, id}]);\n    console.log(allPosts);\n    setState({title: '', content: ''});\n    toggleCreateNewPost();\n  };\n\n  if (isCreateNewPost) {\n    return (\n      <>\n        <NewPost\n          handleChange={handleChange}\n          savePost={savePost}\n        />\n      </>\n    );\n  }\n  else if (isUpdatePost) {\n    \n    return (\n      <UpdatePost\n        title={state.title}\n        content={state.content}\n        updatePost={updatePost}\n        handleChange={handleChange}\n      />\n    );\n  }\n  return (\n    <>\n      <h2>All Posts</h2>\n      {!allPosts.length ? (\n        <div>\n          <h3>There is nothing to see here!</h3>\n        </div>\n      ) : (\n        allPosts.map(eachPost => {\n          return (\n            <Post\n              id={eachPost.id}\n              key={eachPost.id}\n              title={eachPost.title}\n              content={eachPost.content}\n              deletePost={deletePost}\n              editPost={editPost}\n            />\n          );\n        })\n      )}\n      <br />\n      <br />\n      <button onClick={toggleCreateNewPost}>Create New</button>\n    </>\n  );\n};\nexport default DisplayAllPosts;\n","/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/UpdatePost.tsx",[],"/Users/stefanosugbit/Downloads/onramp-fullstack-CRUD-project-main/frontend-blog/src/components/LogOut.tsx",["89"],"import * as React from 'react';\n\nexport interface UserLoginProps {\n  onLogout: (status: boolean) => void;\n}\n\n\n\nconst LogOut: React.FC<UserLoginProps> = (props:UserLoginProps): JSX.Element => {\n  const {onLogout} = props \n  return (\n    <div>\n      {/* <button onClick={onLogout}></button> */}\n    </div>\n  )\n}\n\n\nexport default LogOut ",{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":1,"column":27,"nodeType":"96","messageId":"97","endLine":1,"endColumn":36},{"ruleId":"94","severity":1,"message":"98","line":13,"column":10,"nodeType":"96","messageId":"97","endLine":13,"endColumn":19},{"ruleId":"94","severity":1,"message":"99","line":13,"column":21,"nodeType":"96","messageId":"97","endLine":13,"endColumn":33},{"ruleId":"94","severity":1,"message":"100","line":14,"column":35,"nodeType":"96","messageId":"97","endLine":14,"endColumn":43},{"ruleId":"94","severity":1,"message":"101","line":14,"column":45,"nodeType":"96","messageId":"97","endLine":14,"endColumn":51},{"ruleId":"94","severity":1,"message":"102","line":18,"column":10,"nodeType":"96","messageId":"97","endLine":18,"endColumn":17},{"ruleId":"94","severity":1,"message":"103","line":7,"column":3,"nodeType":"96","messageId":"97","endLine":7,"endColumn":7},{"ruleId":"94","severity":1,"message":"104","line":9,"column":3,"nodeType":"96","messageId":"97","endLine":9,"endColumn":11},{"ruleId":"94","severity":1,"message":"95","line":1,"column":17,"nodeType":"96","messageId":"97","endLine":1,"endColumn":26},{"ruleId":"94","severity":1,"message":"105","line":4,"column":20,"nodeType":"96","messageId":"97","endLine":4,"endColumn":26},{"ruleId":"94","severity":1,"message":"106","line":5,"column":3,"nodeType":"96","messageId":"97","endLine":5,"endColumn":9},{"ruleId":"94","severity":1,"message":"107","line":6,"column":3,"nodeType":"96","messageId":"97","endLine":6,"endColumn":8},{"ruleId":"94","severity":1,"message":"103","line":7,"column":3,"nodeType":"96","messageId":"97","endLine":7,"endColumn":7},{"ruleId":"94","severity":1,"message":"104","line":8,"column":3,"nodeType":"96","messageId":"97","endLine":8,"endColumn":11},{"ruleId":"94","severity":1,"message":"100","line":18,"column":35,"nodeType":"96","messageId":"97","endLine":18,"endColumn":43},{"ruleId":"94","severity":1,"message":"108","line":19,"column":10,"nodeType":"96","messageId":"97","endLine":19,"endColumn":17},{"ruleId":"94","severity":1,"message":"109","line":3,"column":8,"nodeType":"96","messageId":"97","endLine":3,"endColumn":15},{"ruleId":"94","severity":1,"message":"105","line":5,"column":27,"nodeType":"96","messageId":"97","endLine":5,"endColumn":33},{"ruleId":"94","severity":1,"message":"106","line":5,"column":34,"nodeType":"96","messageId":"97","endLine":5,"endColumn":40},{"ruleId":"94","severity":1,"message":"107","line":5,"column":42,"nodeType":"96","messageId":"97","endLine":5,"endColumn":47},{"ruleId":"94","severity":1,"message":"103","line":5,"column":49,"nodeType":"96","messageId":"97","endLine":5,"endColumn":53},{"ruleId":"94","severity":1,"message":"110","line":16,"column":10,"nodeType":"96","messageId":"97","endLine":16,"endColumn":14},{"ruleId":"94","severity":1,"message":"100","line":18,"column":35,"nodeType":"96","messageId":"97","endLine":18,"endColumn":43},{"ruleId":"94","severity":1,"message":"111","line":45,"column":9,"nodeType":"96","messageId":"97","endLine":45,"endColumn":15},{"ruleId":"94","severity":1,"message":"112","line":1,"column":38,"nodeType":"96","messageId":"97","endLine":1,"endColumn":49},{"ruleId":"94","severity":1,"message":"109","line":2,"column":8,"nodeType":"96","messageId":"97","endLine":2,"endColumn":15},{"ruleId":"94","severity":1,"message":"113","line":3,"column":8,"nodeType":"96","messageId":"97","endLine":3,"endColumn":12},{"ruleId":"94","severity":1,"message":"114","line":4,"column":8,"nodeType":"96","messageId":"97","endLine":4,"endColumn":18},{"ruleId":"94","severity":1,"message":"115","line":25,"column":11,"nodeType":"96","messageId":"97","endLine":25,"endColumn":19},{"ruleId":"94","severity":1,"message":"116","line":25,"column":21,"nodeType":"96","messageId":"97","endLine":25,"endColumn":33},{"ruleId":"94","severity":1,"message":"100","line":25,"column":35,"nodeType":"96","messageId":"97","endLine":25,"endColumn":43},{"ruleId":"94","severity":1,"message":"101","line":25,"column":45,"nodeType":"96","messageId":"97","endLine":25,"endColumn":51},{"ruleId":"94","severity":1,"message":"117","line":82,"column":10,"nodeType":"96","messageId":"97","endLine":82,"endColumn":11},{"ruleId":"94","severity":1,"message":"118","line":10,"column":10,"nodeType":"96","messageId":"97","endLine":10,"endColumn":18},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'submitted' is assigned a value but never used.","'setSubmitted' is assigned a value but never used.","'setValue' is assigned a value but never used.","'errors' is assigned a value but never used.","'newPost' is assigned a value but never used.","'Link' is defined but never used.","'Redirect' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'newUser' is assigned a value but never used.","'NewPost' is defined but never used.","'user' is assigned a value but never used.","'logout' is assigned a value but never used.","'useCallback' is defined but never used.","'Post' is defined but never used.","'UpdatePost' is defined but never used.","'register' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'e' is defined but never used.","'onLogout' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]